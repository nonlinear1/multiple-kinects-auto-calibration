#!/usr/bin/env python
PACKAGE = "calib"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

sub = gen.add_group("Subsampling")
sub.add("enable", bool_t, 0, "Enable voxel filter.", True)
sub.add("equal", bool_t, 0, "Use the same length for both dimension (XYZ).", True)
sub.add("x", double_t, 0, "Set length along X (in mm), or XYZ if equal is selected.", 10, 0, 100)
sub.add("y", double_t, 0, "Set length along Y (in mm).", 10, 0, 100)
sub.add("z", double_t, 0, "Set length along Z (in mm).", 10, 0, 100)

cutting = gen.add_group("Cutting")
cutting.add("x_enable", bool_t, 0, "Enable cutting over X axis", False)
cutting.add("x_min", double_t, 0, "Cutting lower bound over X axis (in mm)", -1000, -5000, 5000)
cutting.add("x_max", double_t, 0, "Cutting upper bound over X axis (in mm)", 1000, -5000, 5000)
cutting.add("y_enable", bool_t, 0, "Enable cutting over Y axis (in mm)", False)
cutting.add("y_min", double_t, 0, "Cutting lower bound over Y axis (in mm)", -1000, -5000, 5000)
cutting.add("y_max", double_t, 0, "Cutting upper bound over Y axis (in mm)", 1000, -5000, 5000)
cutting.add("z_enable", bool_t, 0, "Enable cutting over Z axis (in mm)", False)
cutting.add("z_min", double_t, 0, "Cutting lower bound over Z axis (in mm)", -1000, -5000, 5000)
cutting.add("z_max", double_t, 0, "Cutting upper bound over Z axis (in mm)", 1000, -5000, 5000)

transform = gen.add_group("Transformation")
transform.add("tx", double_t, 0, "Set translation along X axis (in mm).", 0, -500, 500)
transform.add("ty", double_t, 0, "Set translation along Y axis (in mm).", 0, -500, 500)
transform.add("tz", double_t, 0, "Set translation along Z axis (in mm).", 0, -500, 500)

transform.add("rx", double_t, 0, "Set rotation around X axis (in degree).", 0, -45, 45)
transform.add("ry", double_t, 0, "Set rotation around Y axis (in degree).", 0, -45, 45)
transform.add("rz", double_t, 0, "Set rotation around Z axis (in degree).", 0, -45, 45)

plane_detection = gen.add_group("Plane_Detection")
method = gen.enum([     gen.const("None", int_t, -1, "No plane detection"),
                        gen.const("RANSAC", int_t, 0, "RANSAC plane detection"),
                        gen.const("LMEDS", int_t, 1, "LMEDS plane detection"),
                        gen.const("MSAC", int_t, 2, "MSAC plane detection"),
                        gen.const("RRANSAC", int_t, 3, "RRANSAC plane detection"),
                        gen.const("RMSAC", int_t, 4, "RMSAC plane detection"),
                        gen.const("MLESAC", int_t, 5, "MLESAC plane detection"),
                        gen.const("PROSAC", int_t, 6, "PROSAC plane detection")],
                        "Choose the plane detectoin method")
plane_detection.add("method", int_t, 0, "Plane detection method", -1, -1, 6, edit_method=method)

plane_detection.add("n_planes", int_t, 0, "Number of planes to detect", 2, 1, 20)
plane_detection.add("th_dist", double_t, 0, "Maximum distance for inliers(in mm)", 50, 0, 1000)
plane_detection.add("max_it", int_t, 0, "Maximum number of iterations", 1000, 1, 10000)

exit(gen.generate(PACKAGE, "calib", "Cloud"))